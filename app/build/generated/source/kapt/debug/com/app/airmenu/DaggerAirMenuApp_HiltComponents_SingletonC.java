// Generated by Dagger (https://dagger.dev).
package com.app.airmenu;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.hilt.lifecycle.ViewModelAssistedFactory;
import androidx.hilt.lifecycle.ViewModelFactoryModules_ActivityModule_ProvideFactoryFactory;
import androidx.hilt.lifecycle.ViewModelFactoryModules_FragmentModule_ProvideFactoryFactory;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;
import com.app.airmenu.broadcast.OnServiceDestroyReceiver;
import com.app.airmenu.di.Modules;
import com.app.airmenu.di.Modules_ProvideApiServiceFactory;
import com.app.airmenu.di.Modules_ProvideGsonFactory;
import com.app.airmenu.di.Modules_ProvideRemoteRepositoryFactory;
import com.app.airmenu.di.Modules_ProvideRetrofitFactory;
import com.app.airmenu.di.Modules_ProvideServiceReceiverFactory;
import com.app.airmenu.local.PreferenceRepository;
import com.app.airmenu.remote.AirMenuApi;
import com.app.airmenu.remote.RemoteRepository;
import com.app.airmenu.service.JavaNotificationService;
import com.app.airmenu.service.JavaNotificationService_MembersInjector;
import com.app.airmenu.service.NotificationService;
import com.app.airmenu.service.NotificationService_MembersInjector;
import com.app.airmenu.ui.HomeActivity;
import com.app.airmenu.ui.HomeActivity_MembersInjector;
import com.app.airmenu.ui.MainActivity;
import com.app.airmenu.ui.divisionIds.DivisionIds;
import com.app.airmenu.ui.divisionIds.DivisionIdsViewModel;
import com.app.airmenu.ui.divisionIds.DivisionIdsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.app.airmenu.ui.home.HomeViewModel;
import com.app.airmenu.ui.home.HomeViewModel_HiltModules_KeyModule_ProvideFactory;
import com.app.airmenu.ui.login.FragmentLogin;
import com.app.airmenu.ui.login.LoginViewModel;
import com.app.airmenu.ui.login.LoginViewModel_HiltModules_KeyModule_ProvideFactory;
import com.app.airmenu.ui.notification.FragmentNotificationAccess;
import com.app.airmenu.ui.notification.FragmentNotificationAccess_MembersInjector;
import com.app.airmenu.ui.notification.NotificationAccessViewModel;
import com.app.airmenu.ui.notification.NotificationAccessViewModel_HiltModules_KeyModule_ProvideFactory;
import com.app.airmenu.ui.posIds.FragmentPosIds;
import com.app.airmenu.ui.posIds.PosIdsViewModel;
import com.app.airmenu.ui.posIds.PosIdsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.app.airmenu.ui.uberlogin.UberLogin;
import com.app.airmenu.ui.uberlogin.UberLogin_MembersInjector;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAirMenuApp_HiltComponents_SingletonC extends AirMenuApp_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private volatile Object retrofit = new MemoizedSentinel();

  private volatile Object remoteRepository = new MemoizedSentinel();

  private volatile Object onServiceDestroyReceiver = new MemoizedSentinel();

  private DaggerAirMenuApp_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private Retrofit retrofit() {
    Object local = retrofit;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = retrofit;
        if (local instanceof MemoizedSentinel) {
          local = Modules_ProvideRetrofitFactory.provideRetrofit(Modules_ProvideGsonFactory.provideGson());
          retrofit = DoubleCheck.reentrantCheck(retrofit, local);
        }
      }
    }
    return (Retrofit) local;
  }

  private AirMenuApi airMenuApi() {
    return Modules_ProvideApiServiceFactory.provideApiService(retrofit());
  }

  private RemoteRepository remoteRepository() {
    Object local = remoteRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = remoteRepository;
        if (local instanceof MemoizedSentinel) {
          local = Modules_ProvideRemoteRepositoryFactory.provideRemoteRepository(airMenuApi());
          remoteRepository = DoubleCheck.reentrantCheck(remoteRepository, local);
        }
      }
    }
    return (RemoteRepository) local;
  }

  private OnServiceDestroyReceiver onServiceDestroyReceiver() {
    Object local = onServiceDestroyReceiver;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = onServiceDestroyReceiver;
        if (local instanceof MemoizedSentinel) {
          local = Modules_ProvideServiceReceiverFactory.provideServiceReceiver();
          onServiceDestroyReceiver = DoubleCheck.reentrantCheck(onServiceDestroyReceiver, local);
        }
      }
    }
    return (OnServiceDestroyReceiver) local;
  }

  @Override
  public void injectAirMenuApp(AirMenuApp airMenuApp) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder();
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder modules(Modules modules) {
      Preconditions.checkNotNull(modules);
      return this;
    }

    public AirMenuApp_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerAirMenuApp_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private final class ActivityRetainedCBuilder implements AirMenuApp_HiltComponents.ActivityRetainedC.Builder {
    @Override
    public AirMenuApp_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl();
    }
  }

  private final class ActivityRetainedCImpl extends AirMenuApp_HiltComponents.ActivityRetainedC {
    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl() {

    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder();
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private final class ActivityCBuilder implements AirMenuApp_HiltComponents.ActivityC.Builder {
      private Activity activity;

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public AirMenuApp_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(activity);
      }
    }

    private final class ActivityCImpl extends AirMenuApp_HiltComponents.ActivityC {
      private final Activity activity;

      private ActivityCImpl(Activity activityParam) {
        this.activity = activityParam;
      }

      private PreferenceRepository preferenceRepository() {
        return new PreferenceRepository(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAirMenuApp_HiltComponents_SingletonC.this.applicationContextModule));
      }

      private ViewModelProvider.Factory provideFactory() {
        return ViewModelFactoryModules_ActivityModule_ProvideFactoryFactory.provideFactory(activity, ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAirMenuApp_HiltComponents_SingletonC.this.applicationContextModule), ImmutableMap.<String, Provider<ViewModelAssistedFactory<? extends ViewModel>>>of());
      }

      private Set<ViewModelProvider.Factory> defaultActivityViewModelFactorySetOfViewModelProviderFactory(
          ) {
        return ImmutableSet.<ViewModelProvider.Factory>of(provideFactory());
      }

      @Override
      public void injectHomeActivity(HomeActivity arg0) {
        injectHomeActivity2(arg0);
      }

      @Override
      public void injectMainActivity(MainActivity arg0) {
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAirMenuApp_HiltComponents_SingletonC.this.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(), defaultActivityViewModelFactorySetOfViewModelProviderFactory(), ImmutableSet.<ViewModelProvider.Factory>of());
      }

      @Override
      public Set<String> getViewModelKeys() {
        return ImmutableSet.<String>of(DivisionIdsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), HomeViewModel_HiltModules_KeyModule_ProvideFactory.provide(), LoginViewModel_HiltModules_KeyModule_ProvideFactory.provide(), NotificationAccessViewModel_HiltModules_KeyModule_ProvideFactory.provide(), PosIdsViewModel_HiltModules_KeyModule_ProvideFactory.provide());
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder();
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder();
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder();
      }

      @CanIgnoreReturnValue
      private HomeActivity injectHomeActivity2(HomeActivity instance) {
        HomeActivity_MembersInjector.injectRemoteRepository(instance, DaggerAirMenuApp_HiltComponents_SingletonC.this.remoteRepository());
        HomeActivity_MembersInjector.injectPrefRepository(instance, preferenceRepository());
        return instance;
      }

      private final class FragmentCBuilder implements AirMenuApp_HiltComponents.FragmentC.Builder {
        private Fragment fragment;

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public AirMenuApp_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCImpl(fragment);
        }
      }

      private final class FragmentCImpl extends AirMenuApp_HiltComponents.FragmentC {
        private final Fragment fragment;

        private FragmentCImpl(Fragment fragmentParam) {
          this.fragment = fragmentParam;
        }

        private ViewModelProvider.Factory provideFactory() {
          return ViewModelFactoryModules_FragmentModule_ProvideFactoryFactory.provideFactory(fragment, ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAirMenuApp_HiltComponents_SingletonC.this.applicationContextModule), ImmutableMap.<String, Provider<ViewModelAssistedFactory<? extends ViewModel>>>of());
        }

        private Set<ViewModelProvider.Factory> defaultFragmentViewModelFactorySetOfViewModelProviderFactory(
            ) {
          return ImmutableSet.<ViewModelProvider.Factory>of(provideFactory());
        }

        @Override
        public void injectDivisionIds(DivisionIds arg0) {
        }

        @Override
        public void injectFragmentLogin(FragmentLogin arg0) {
        }

        @Override
        public void injectFragmentNotificationAccess(FragmentNotificationAccess arg0) {
          injectFragmentNotificationAccess2(arg0);
        }

        @Override
        public void injectFragmentPosIds(FragmentPosIds arg0) {
        }

        @Override
        public void injectUberLogin(UberLogin arg0) {
          injectUberLogin2(arg0);
        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAirMenuApp_HiltComponents_SingletonC.this.applicationContextModule), ActivityCImpl.this.getViewModelKeys(), new ViewModelCBuilder(), ActivityCImpl.this.defaultActivityViewModelFactorySetOfViewModelProviderFactory(), defaultFragmentViewModelFactorySetOfViewModelProviderFactory());
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder();
        }

        @CanIgnoreReturnValue
        private FragmentNotificationAccess injectFragmentNotificationAccess2(
            FragmentNotificationAccess instance) {
          FragmentNotificationAccess_MembersInjector.injectServiceDestroyBroadcast(instance, DaggerAirMenuApp_HiltComponents_SingletonC.this.onServiceDestroyReceiver());
          return instance;
        }

        @CanIgnoreReturnValue
        private UberLogin injectUberLogin2(UberLogin instance) {
          UberLogin_MembersInjector.injectPrefRepository(instance, ActivityCImpl.this.preferenceRepository());
          return instance;
        }

        private final class ViewWithFragmentCBuilder implements AirMenuApp_HiltComponents.ViewWithFragmentC.Builder {
          private View view;

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public AirMenuApp_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCImpl(view);
          }
        }

        private final class ViewWithFragmentCImpl extends AirMenuApp_HiltComponents.ViewWithFragmentC {
          private ViewWithFragmentCImpl(View view) {

          }
        }
      }

      private final class ViewCBuilder implements AirMenuApp_HiltComponents.ViewC.Builder {
        private View view;

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public AirMenuApp_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCImpl(view);
        }
      }

      private final class ViewCImpl extends AirMenuApp_HiltComponents.ViewC {
        private ViewCImpl(View view) {

        }
      }
    }

    private final class ViewModelCBuilder implements AirMenuApp_HiltComponents.ViewModelC.Builder {
      private SavedStateHandle savedStateHandle;

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public AirMenuApp_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(savedStateHandle);
      }
    }

    private final class ViewModelCImpl extends AirMenuApp_HiltComponents.ViewModelC {
      private volatile Provider<DivisionIdsViewModel> divisionIdsViewModelProvider;

      private volatile Provider<HomeViewModel> homeViewModelProvider;

      private volatile Provider<LoginViewModel> loginViewModelProvider;

      private volatile Provider<NotificationAccessViewModel> notificationAccessViewModelProvider;

      private volatile Provider<PosIdsViewModel> posIdsViewModelProvider;

      private ViewModelCImpl(SavedStateHandle savedStateHandle) {

      }

      private PreferenceRepository preferenceRepository() {
        return new PreferenceRepository(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAirMenuApp_HiltComponents_SingletonC.this.applicationContextModule));
      }

      private DivisionIdsViewModel divisionIdsViewModel() {
        return new DivisionIdsViewModel(DaggerAirMenuApp_HiltComponents_SingletonC.this.remoteRepository(), preferenceRepository());
      }

      private Provider<DivisionIdsViewModel> divisionIdsViewModelProvider() {
        Object local = divisionIdsViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(0);
          divisionIdsViewModelProvider = (Provider<DivisionIdsViewModel>) local;
        }
        return (Provider<DivisionIdsViewModel>) local;
      }

      private HomeViewModel homeViewModel() {
        return new HomeViewModel(DaggerAirMenuApp_HiltComponents_SingletonC.this.remoteRepository(), preferenceRepository());
      }

      private Provider<HomeViewModel> homeViewModelProvider() {
        Object local = homeViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(1);
          homeViewModelProvider = (Provider<HomeViewModel>) local;
        }
        return (Provider<HomeViewModel>) local;
      }

      private LoginViewModel loginViewModel() {
        return new LoginViewModel(DaggerAirMenuApp_HiltComponents_SingletonC.this.remoteRepository(), preferenceRepository());
      }

      private Provider<LoginViewModel> loginViewModelProvider() {
        Object local = loginViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(2);
          loginViewModelProvider = (Provider<LoginViewModel>) local;
        }
        return (Provider<LoginViewModel>) local;
      }

      private NotificationAccessViewModel notificationAccessViewModel() {
        return new NotificationAccessViewModel(DaggerAirMenuApp_HiltComponents_SingletonC.this.remoteRepository(), preferenceRepository());
      }

      private Provider<NotificationAccessViewModel> notificationAccessViewModelProvider() {
        Object local = notificationAccessViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(3);
          notificationAccessViewModelProvider = (Provider<NotificationAccessViewModel>) local;
        }
        return (Provider<NotificationAccessViewModel>) local;
      }

      private PosIdsViewModel posIdsViewModel() {
        return new PosIdsViewModel(DaggerAirMenuApp_HiltComponents_SingletonC.this.remoteRepository(), preferenceRepository());
      }

      private Provider<PosIdsViewModel> posIdsViewModelProvider() {
        Object local = posIdsViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(4);
          posIdsViewModelProvider = (Provider<PosIdsViewModel>) local;
        }
        return (Provider<PosIdsViewModel>) local;
      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return ImmutableMap.<String, Provider<ViewModel>>of("com.app.airmenu.ui.divisionIds.DivisionIdsViewModel", (Provider) divisionIdsViewModelProvider(), "com.app.airmenu.ui.home.HomeViewModel", (Provider) homeViewModelProvider(), "com.app.airmenu.ui.login.LoginViewModel", (Provider) loginViewModelProvider(), "com.app.airmenu.ui.notification.NotificationAccessViewModel", (Provider) notificationAccessViewModelProvider(), "com.app.airmenu.ui.posIds.PosIdsViewModel", (Provider) posIdsViewModelProvider());
      }

      private final class SwitchingProvider<T> implements Provider<T> {
        private final int id;

        SwitchingProvider(int id) {
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // com.app.airmenu.ui.divisionIds.DivisionIdsViewModel 
            return (T) ViewModelCImpl.this.divisionIdsViewModel();

            case 1: // com.app.airmenu.ui.home.HomeViewModel 
            return (T) ViewModelCImpl.this.homeViewModel();

            case 2: // com.app.airmenu.ui.login.LoginViewModel 
            return (T) ViewModelCImpl.this.loginViewModel();

            case 3: // com.app.airmenu.ui.notification.NotificationAccessViewModel 
            return (T) ViewModelCImpl.this.notificationAccessViewModel();

            case 4: // com.app.airmenu.ui.posIds.PosIdsViewModel 
            return (T) ViewModelCImpl.this.posIdsViewModel();

            default: throw new AssertionError(id);
          }
        }
      }
    }
  }

  private final class ServiceCBuilder implements AirMenuApp_HiltComponents.ServiceC.Builder {
    private Service service;

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public AirMenuApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(service);
    }
  }

  private final class ServiceCImpl extends AirMenuApp_HiltComponents.ServiceC {
    private ServiceCImpl(Service service) {

    }

    private PreferenceRepository preferenceRepository() {
      return new PreferenceRepository(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAirMenuApp_HiltComponents_SingletonC.this.applicationContextModule));
    }

    @Override
    public void injectJavaNotificationService(JavaNotificationService arg0) {
      injectJavaNotificationService2(arg0);
    }

    @Override
    public void injectNotificationService(NotificationService arg0) {
      injectNotificationService2(arg0);
    }

    @CanIgnoreReturnValue
    private JavaNotificationService injectJavaNotificationService2(
        JavaNotificationService instance) {
      JavaNotificationService_MembersInjector.injectRemoteRepository(instance, DaggerAirMenuApp_HiltComponents_SingletonC.this.remoteRepository());
      JavaNotificationService_MembersInjector.injectPreferenceRepository(instance, preferenceRepository());
      return instance;
    }

    @CanIgnoreReturnValue
    private NotificationService injectNotificationService2(NotificationService instance) {
      NotificationService_MembersInjector.injectPrefRepository(instance, preferenceRepository());
      NotificationService_MembersInjector.injectRemoteRepository(instance, DaggerAirMenuApp_HiltComponents_SingletonC.this.remoteRepository());
      return instance;
    }
  }
}
