// Generated by Dagger (https://dagger.dev).
package com.app.airmenu.service;

import com.app.airmenu.local.PreferenceRepository;
import com.app.airmenu.remote.RemoteRepository;
import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class JavaNotificationService_MembersInjector implements MembersInjector<JavaNotificationService> {
  private final Provider<RemoteRepository> remoteRepositoryProvider;

  private final Provider<PreferenceRepository> preferenceRepositoryProvider;

  public JavaNotificationService_MembersInjector(
      Provider<RemoteRepository> remoteRepositoryProvider,
      Provider<PreferenceRepository> preferenceRepositoryProvider) {
    this.remoteRepositoryProvider = remoteRepositoryProvider;
    this.preferenceRepositoryProvider = preferenceRepositoryProvider;
  }

  public static MembersInjector<JavaNotificationService> create(
      Provider<RemoteRepository> remoteRepositoryProvider,
      Provider<PreferenceRepository> preferenceRepositoryProvider) {
    return new JavaNotificationService_MembersInjector(remoteRepositoryProvider, preferenceRepositoryProvider);
  }

  @Override
  public void injectMembers(JavaNotificationService instance) {
    injectRemoteRepository(instance, remoteRepositoryProvider.get());
    injectPreferenceRepository(instance, preferenceRepositoryProvider.get());
  }

  @InjectedFieldSignature("com.app.airmenu.service.JavaNotificationService.remoteRepository")
  public static void injectRemoteRepository(JavaNotificationService instance,
      RemoteRepository remoteRepository) {
    instance.remoteRepository = remoteRepository;
  }

  @InjectedFieldSignature("com.app.airmenu.service.JavaNotificationService.preferenceRepository")
  public static void injectPreferenceRepository(JavaNotificationService instance,
      PreferenceRepository preferenceRepository) {
    instance.preferenceRepository = preferenceRepository;
  }
}
