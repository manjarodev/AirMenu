// Generated by Dagger (https://dagger.dev).
package com.app.airmenu.service;

import com.app.airmenu.local.PreferenceRepository;
import com.app.airmenu.remote.RemoteRepository;
import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NotificationService_MembersInjector implements MembersInjector<NotificationService> {
  private final Provider<PreferenceRepository> prefRepositoryProvider;

  private final Provider<RemoteRepository> remoteRepositoryProvider;

  public NotificationService_MembersInjector(Provider<PreferenceRepository> prefRepositoryProvider,
      Provider<RemoteRepository> remoteRepositoryProvider) {
    this.prefRepositoryProvider = prefRepositoryProvider;
    this.remoteRepositoryProvider = remoteRepositoryProvider;
  }

  public static MembersInjector<NotificationService> create(
      Provider<PreferenceRepository> prefRepositoryProvider,
      Provider<RemoteRepository> remoteRepositoryProvider) {
    return new NotificationService_MembersInjector(prefRepositoryProvider, remoteRepositoryProvider);
  }

  @Override
  public void injectMembers(NotificationService instance) {
    injectPrefRepository(instance, prefRepositoryProvider.get());
    injectRemoteRepository(instance, remoteRepositoryProvider.get());
  }

  @InjectedFieldSignature("com.app.airmenu.service.NotificationService.prefRepository")
  public static void injectPrefRepository(NotificationService instance,
      PreferenceRepository prefRepository) {
    instance.prefRepository = prefRepository;
  }

  @InjectedFieldSignature("com.app.airmenu.service.NotificationService.remoteRepository")
  public static void injectRemoteRepository(NotificationService instance,
      RemoteRepository remoteRepository) {
    instance.remoteRepository = remoteRepository;
  }
}
